<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">


    <!-- Root Context: defines shared resources visible to all other web components -->

    <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/book_ex"></property>
        <property name="username" value="zerock"></property>
        <property name="password" value="zerock"></property>
    </bean>	 -->

    <context:component-scan base-package="org.zerock.service"></context:component-scan>
    <!-- service 작업시 root-context.xml에 <context>를 사용해서 패키지를 자동으로 인식할 수 있도록 함. -->

    <context:component-scan base-package="org.zerock.aop"></context:component-scan>

    <context:component-scan base-package="org.zerock.persistence"></context:component-scan>
    <!-- dao 작업시 dataSource, sqlSessionFactory, sqlSession의 persistence 패키지를 자동으로 인식하기 위한 <context:component-scan>이 사용된 것을 주의. -->

    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <!--AOP의 설정을 통한 자동적인 Proxy 객체 생성을 위해서 다음과 같은 설정을 미리 추가. - <aop:aspectj-autoproxy>는 자동으로 AspectJ 라이브러리를 이용해서 Proxy 객체를 생성해내는 용도.-->

    <aop:config></aop:config>
    <!--root-context.xml에 AOP 기능을 설정할 수 있도록 <aop:config>를 추가할 수 있음. 이 설정은 향후 XML 방식으로 AOP 기능을 설정할 때 사용.-->

    <!-- 자체적인 DB 연결 -->
    <!--DataSource는 MyBatis를 사용하기 위해서 반드시 root-context.xml을 사용해서 등록. -->
    <!--프로젝트의 실행에 있어서 DataSource의 테스트는 반드시 필요하므로 test 폴더에 테스트 코드를 이용해서 테스트를 진행. -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName"
                  value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
        <property name="url"
                  value="jdbc:log4jdbc:mysql://127.0.0.1:3306/PrjWeb"></property>

        <!--value="jdbc:log4jdbc:mysql://node.clvidmnht9m3.ap-northeast-2.rds.amazonaws.com/PrjWeb?verifyServerCertificate=false&amp;useSSL=true"></property>-->

        <!--value="jdbc:log4jdbc:mysql://127.0.0.1:3306/PrjWeb?verifyServerCertificate=false&amp;useSSL=true"></property>-->
        <!--value="jdbc:log4jdbc:mysql://node.clvidmnht9m3.ap-northeast-2.rds.amazonaws.com/PrjWeb?zeroDateTimeBehavior=convertToNull"></property>-->

        <!--<property name="username" value="Node"></property>-->
        <!--<property name="password" value="kjg4989q"></property>-->

        <property name="username" value="root"></property>
        <property name="password" value="4444"></property>
    </bean>


    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation"
                  value="classpath:/mybatis-config.xml"></property>
        <property name="mapperLocations"
                  value="classpath:mappers/**/*Mapper.xml"></property>
    </bean>


    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
        <!-- destory-method="clearChache" 자동으로 .close 해줘서 메모리 누수와 DB 과부하 막음 -->
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 트랜잭션 매니저의 설정 - Spring Project를 이용해서 생성된 경우에 가장 간단한 설정은 DataSource의 설정이 존재하는 곳에 적용하는 것이 가장 편리. -->

    <tx:annotation-driven></tx:annotation-driven>
    <!-- @Transactional 애노테이션을 이용한 트랜잭션의 관리가 가능. -->




    <!--<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">-->
    <!--<property name="basenames">-->
    <!--<list>-->
    <!--<value>/resources/messages/spring_security_messages</value>-->
    <!--&lt;!&ndash;됨&ndash;&gt;-->
    <!--</list>-->
    <!--</property>-->
    <!--<property name="defaultEncoding" value="UTF-8"></property>  -->
    <!--</bean>-->

</beans>
